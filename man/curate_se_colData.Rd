% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/platjam-curate-se.R
\name{curate_se_colData}
\alias{curate_se_colData}
\title{Curate Summarized Experiment colData}
\usage{
curate_se_colData(
  se,
  df,
  pattern_colname = head(colnames(df), 1),
  group_colname = NULL,
  id_colname = "Label",
  use = c("colnames"),
  use_delim = "_",
  subset_se = FALSE,
  warn_multimatch = TRUE,
  indent = 0,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{se}{\code{SummarizedExperiment} object.}

\item{df}{\code{data.frame} (or equivalent) which contains columns of
data annotation to be applied.
The first column is assumed to be the column used for
patterns to be matched with identifiers in the \code{se} object.
The pattern column can be defined with \code{pattern_colname}.}

\item{pattern_colname}{\code{character} value indicating which
column in \code{df} contains patterns to be matched with identifiers
in \code{se}. The default uses the first column in \code{df}.
This value is passed to \code{curate_to_df_by_pattern()}.}

\item{group_colname}{\code{character} or \code{NULL} (default) indicating
which column(s) represent experimental groups, used
only to create a corresponding column with unique label
for each entry. When \code{NULL} no action is taken, which is default.}

\item{id_colname}{\code{character} used only when \code{group_colname} is
defined and present in \code{colnames(df)}, used to create a
unique label for each row in \code{colData(se)}.
By default \code{group_colname=NULL} so no action is taken.}

\item{use}{\code{character} string indicating the data to use as
the identifiers when applying curation logic.
The default is to use \code{colnames(se)}, however it can use one
or more columns from \code{SummarizedExperiment::colData(se)}.
Some options are described below:
\itemize{
\item \code{"colnames"}: uses \code{colnames(se)}, which should be equivalent
to using \code{rownames(SummarizedExperiment::colData(se))}.
\item \code{"rownames"}: uses \code{rownames(SummarizedExperiment::colData(se))},
which as stated above should be equivalent to \code{colnames(se)}.
\item one or more \code{character} values that match \code{colnames(colData(se))}.
}}

\item{use_delim}{\code{character} string used as a delimiter when
\code{use} is supplied as a vector with multiple colnames.
The values in each column are concatenated using this delimiter,
by calling \code{jamba::pasteByRow()}.}

\item{subset_se}{\code{logical} indicating whether the \code{se} object columns
be subset when not all identifiers matched the patterns in \code{df}.
\itemize{
\item When \code{subset_se=FALSE} any entries in \code{se} for which
the identifier did not match the pattern in \code{df},
the corresponding rows of \code{SummarizedExperiment::colData()}
will contain \code{NA} values.
\item When \code{subset=TRUE} any entries in \code{se} for which
the identifier did not match the pattern in \code{df} will
be removed from the \code{se} object. This option is sometimes
a convenient way to subset a large data to use only
user-defined samples.
}}

\item{warn_multimatch}{\code{logical} indicating whether to print a warning
when any one pattern matches two or more identifiers.
Sometimes this behavior is intended, however it may indicate
that the patterns are not specific enough to match one unique
identifier. See Details.}

\item{indent}{\code{numeric} value used when \code{verbose=TRUE}, passed to
\code{jamba::printDebug()}.}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{...}{additional arguments are passed to \code{curate_to_df_by_pattern()}.}
}
\value{
\code{SummarizedExperiment::SummarizedExperiment} object.
\itemize{
\item When \code{subset_se=FALSE} (default), the output will contain
the same dimensions and column order as the input \code{se}.
\item When \code{subset_se=TRUE} the output object may contain fewer columns
based upon the number of identifiers that matched the patterns
supplied in \code{df}.
}
}
\description{
Apply curation to colData in a SummarizedExperiment object
}
\details{
Given a SummarizedExperiment object, this function is intended
to augment the \code{SummarizedExperiment::colData()} annotation associated
with columns, which are typically biological or experimental
samples.
Measurements within each sample are typically stored as rows.

A convenient wrapper to \code{curate_to_df_by_pattern()}, which applies
the result directly to \code{SummarizedExperiment::colData()} which is
stored as a \code{S4Vectors::DataFrame-class}.

Note that colnames present in both \code{colData(se)} and \code{df} will
take the value from \code{df} as replacement, including the presence of \code{NA}
values.
\subsection{About pattern matching}{

The patterns are used to match identifiers using regular expressions,
and the argument \code{warn_multimatch=TRUE} (default) will print a
warning when one pattern matches two or more identifiers.
It may be intended, or may indicate that some patterns are not
specific enough to match only one intended identifier.

For example \code{pattern="sample_3"} will match identifiers:
\code{c("one_sample_3", "two_sample_3", "one_sample_31")}.

To overcome this type of issue, use regular expressions to
limit matching to the end, for example \code{pattern="sample_3$"}
will only match \code{c("one_sample_3", "two_sample_3")} and
will not match \code{"one_sample_31"}.

It can be helpful to name the pattern column \code{"Pattern"} so that
the pattern used is clearly defined in the output
\code{colData(se)}, and can be compared to the intended identifiers.
}
}
\seealso{
Other jam utility functions: 
\code{\link{cardinality}()},
\code{\link{color_complement}()},
\code{\link{convert_PD_df_to_SE}()},
\code{\link{convert_imputed_assays_to_na}()},
\code{\link{curate_to_df_by_pattern}()},
\code{\link{design2layout}()},
\code{\link{get_numeric_transform}()},
\code{\link{handle_df_args}()},
\code{\link{merge_proteomics_se}()},
\code{\link{nmat_summary}()},
\code{\link{nmatlist_summary}()},
\code{\link{rmd_tab_iterator}()},
\code{\link{rowNormScale}()},
\code{\link{summit_from_vector}()}
}
\concept{jam utility functions}
