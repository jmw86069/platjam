% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jam-design2colors.R
\name{design2colors}
\alias{design2colors}
\title{Convert experiment design into categorical colors}
\usage{
design2colors(
  x,
  group_colnames = NULL,
  lightness_colnames = NULL,
  class_colnames = NULL,
  ignore_colnames = NULL,
  preset = "dichromat",
  phase = 1,
  rotate_phase = -1,
  class_pad = 1,
  end_hue_pad = 2,
  hue_offset = 0,
  desat = c(0, 0.4),
  dex = c(2, 5),
  color_sub = NULL,
  plot_type = c("table", "list", "none"),
  return_type = c("list", "df", "vector"),
  verbose = FALSE,
  ...
)
}
\arguments{
\item{x}{\code{data.frame} with columns to be colorized}

\item{group_colnames}{\code{character} or \code{intger} vector indicating
which \code{colnames(x)} to use, in order, for group color assignment.}

\item{lightness_colnames}{\code{character} or \code{intger} vector indicating
which \code{colnames(x)} to use, in order, for group lightness gradient.}

\item{class_colnames}{\code{character} or \code{intger} vector indicating
higher-level grouping of \code{group_colnames}}

\item{preset}{\code{character} string passed to \code{colorjam::h2hwOptions()},
which defines the hues around a color wheel, used when selecting
categorical colors.}

\item{phase, rotate_phase}{\code{integer} value, \code{phase} is passed to
\code{colorjam::rainbowJam()} to define the light/dark pattern phasing,
which has 6 positions, and negative values reverse the order.
Categorical colors are assigned to the class/group combinations,
after which \code{phase + rotate_phase} is used for categorical colors
for any remaining values.}

\item{class_pad}{\code{integer} zero or greater, indicating the number
of empty hues to insert as a spacer between hues when the class
changes in a sequence of class/group values. Higher values will
ensure the hues in each class are more distinct from each other
across class, and more similar to each other within class.}

\item{end_hue_pad}{\code{integer} used to pad hues at the end of a
color wheel sequence, typically useful to ensure the last color
is not similar to the first color.}

\item{desat}{\code{numeric} vector extended to length=2, used to desaturate
class/group colors, then remaining colors, in order. The intended
effect is to have class/group colors visibly more colorful than
remaining colors assigned to other factors.}

\item{dex}{\code{numeric} vector passed to \code{jamba::color2gradient()} to
define the darkness expansion factor, where 1 applies a moderate
effect, and higher values apply more dramatic light-to-dark
effect. When \code{dex} has length=2, the second value is used only
for columns where colors are assigned by \code{colnames(x)}
using \code{color_sub}.}

\item{color_sub}{\code{character} vector of R colors, where \code{names(color_sub)}
assign each color to a character string. It is intended to allow
specific color assignments upfront.
\itemize{
\item \code{colnames(x)}: when \code{names(color_sub)} matches a column name in \code{x},
the color is assigned to that color using a color gradient across
the unique character values in that column. Values are assigned in
order of their appearance in \code{x} unless the column is a \code{factor},
in which case colors are assigned to \code{levels}.
}}

\item{plot_type}{\code{character} string indicating a type of plot for results:
\itemize{
\item \code{"table"}: plots a color table equal to the input \code{data.frame} where
background cells indicate color assignments.
\item \code{"list"}: plots colors defined for each column in \code{x} using
\code{jamba::showColors()}
\item \code{"none"}: no plot is produced
}}

\item{return_type}{\code{character} string indicating the data format to return:
\itemize{
\item \code{"list"}: a \code{list} of colors, named by \code{colnames(x)}.
\item \code{"df"}: a \code{data.frame} in order of \code{x} with colors assigned to each cell.
\item \code{"vector"}: a \code{character} vector of R colors, named by assigned
factor level.
}}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{...}{additional arguments are passed to downstream functions.}
}
\value{
output depends upon argument \code{return_type}:
\itemize{
\item \code{"list"}: returns a \code{list} of colors defined by \code{colnames(x)},
suitable for use with \code{ComplexHeatmap::HeatmapAnnotation()} for example.
\item \code{"df"}: returns \code{data.frame} of colors with same dimensions as the
input \code{x}. Suitable for use with \code{jamba::imageByColors()} for example.
\item \code{"vector"}: returns \code{character} vector of R colors, whose names represent
values in \code{x}, where the values should be substituted with the color.
Suitable for use with \code{ggplot2::color_manual(values=colors)}.

In all cases, the \code{attributes()} of the returned object also includes
colors in the other two formats: \code{"color_sub"}, \code{"color_df"}, and
\code{"color_list"}.
}
}
\description{
Convert experiment design into categorical colors
}
\details{
The general goal is to assign categorical colors relevant to
the experimental design of an analysis. The basic logic:
\enumerate{
\item Assign categorical colors to broadly defined experimental groups.
\item Shade these colors light-to-dark based upon secondary factors.
\item For step 1 above, optionally assign similar color hues by class.
}
\subsection{Categorical colors}{

At its simplest a set of groups can be assigned categorical colors.
\itemize{
\item colors should be visibly distinct from one another
\item colors should generally be distinct across forms of color-blindness
\item colors should be consistent across plots, figures, tables
}

Finally, colors may be pre-defined using a named vector of colors.
These colors will be propagated to other entries in the table.
}

\subsection{Light-to-dark gradient}{

The light-to-dark gradient is intended for ordered sub-divisions,
for example:
\itemize{
\item across time points in a time series
\item across treatment doses in an ordered series
\item across ordered measurements first-to-last
}
}

\subsection{Group class}{

The group classification is intended to assign color hues
for similar groups:
\itemize{
\item antagonists, agonists, untreated
\item treated, untreated
\item wildtype, mutant form 1, mutant form 2, etc.
}

For example, antagonists may be assigned colors blue-to-purple;
agonists may be assigned colors red-to-orange; with a pronounced
color hue "gap" between antagonists and agonists.
}

\subsection{Additional categorical color assignment}{

Finally, other annotations associated with samples are assigned
categorical colors, visibly distinct from other color assignments.

For entries associated with only one design color, for example "Sample_ID",
"Sample Name", "Lane Number", or "Well Number",
they inherit the design color.

For entries associated with more than one design color, for example
"Batch", "Date", or perhaps "Dose", they will be assigned a unique
color.
\itemize{
\item additional annotations unique to design colors inherit the design colors
\item additional categorical colors should not duplicate existing colors
}
}

\subsection{Future ideas}{
\itemize{
\item Assign "additional factors" to colors based upon \code{class}
\itemize{
\item Currently "additional factors" are only tested by class_group and
class_group_lightness.
\item It could be useful to test versus \code{class} alone (if supplied)
\item Goal would be to assign color hue using the mean color hue in the class.
\item Otherwise the class may be assigned a color inconsistent with the
range of color hues.
}
\item Handle numeric columns by applying color gradient
\itemize{
\item A truly numeric column (not just integer index values) could
use \code{circlize::colorRamp2()} to apply color gradient
}
}
}
}
\examples{
df <- data.frame(
   genotype=rep(c("WT", "GeneAKO", "GeneBKO"), c(4, 8, 8)),
   treatment=rep(rep(c("control", "treated"), each=2), 5),
   class=rep(c("WT", "KO"), c(4, 16)),
   time=c(rep("early", 4),
      rep(rep(c("early", "late"), each=4), 2)))
df$sample_group <- jamba::pasteByRow(df[,c("genotype", "treatment", "time")])
df$sample_name <- jamba::makeNames(df$sample_group);
df$age <- sample(40:80, size=nrow(df));
df

dfc <- design2colors(df,
   group_colnames="genotype",
   lightness_colnames="treatment",
   class_colnames="class",
   color_sub=c(age="dodgerblue"))

# same as above except assign colors to columns and some values
dfc <- design2colors(df,
   group_colnames="genotype",
   lightness_colnames="treatment",
   class_colnames="class",
   preset="dichromat",
   color_sub=c(KO="firebrick3",
      treatment="navy",
      class="cyan",
      time="dodgerblue"))

# same as above except assign specific group colors
dfc <- design2colors(df,
   group_colnames="genotype",
   lightness_colnames="treatment",
   class_colnames="class",
   preset="dichromat",
   color_sub=c(
      WT_WT="gold",
      KO_GeneAKO="firebrick3",
      KO_GeneBKO="dodgerblue",
      treatment="navy",
      time="darkorchid4",
      class="burlywood"))

dfc2 <- design2colors(df,
   group_colnames="genotype",
   lightness_colnames=c("time", "treatment"),
   class_colnames="class",
   preset="dichromat")

dfc3 <- design2colors(df,
   group_colnames=c("genotype"),
   lightness_colnames=c("time", "treatment"),
   class_colnames="genotype",
   rotate_phase=TRUE,
   preset="dichromat")

df1 <- df;
df2 <- subset(df, time \%in\% "early");
df12 <- rbind(df1, df2);
dfc12 <- design2colors(df12,
   group_colnames="genotype",
   lightness_colnames=c("time", "treatment"),
   class_colnames="-class",
   preset="dichromat")

}
