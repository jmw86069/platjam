% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jam_rmd_tab_iterator.R
\name{rmd_tab_iterator}
\alias{rmd_tab_iterator}
\title{RMarkdown tab iterator}
\usage{
rmd_tab_iterator(
  tab_list,
  fn_list = NULL,
  base_fn = NULL,
  tab_labels = NULL,
  heading_level = 2,
  verbose = FALSE,
  quiet = TRUE,
  htmlOut = TRUE,
  envir = NULL,
  ...
)
}
\arguments{
\item{tab_list}{\code{list} of \code{character} or \code{list} objects.
\itemize{
\item each \code{list} entry represents a layer of tabs
\item \code{names(tab_list)} defines the variable name to which each element
in the \code{list} is assigned.
For example \verb{tab_list=list(use_gene=c("ACTB", "GAPDH")} will create
a layer of tabs, with tabs \code{"ACTB"}, and \code{"GAPDH"}. For the \code{"ACTB"}
tab it will assign \code{use_gene <- "ACTB"} for use in the tab.
\item the names of the \code{list} should match \code{names(prep_list)}
\item each \code{character} vector contains the tabs to display
}}

\item{fn_list}{\code{list} of \code{functions} to apply to corresponding
layers of tabs.
\itemize{
\item \code{names(prep_list)} must match \code{names(tab_list)}, and provides
the function to be applied at the specified layer of tabs.
This function should create the tab content, and should not print
the tab header itself.
}}

\item{base_fn}{\code{function} called at the bottom layer of tabs.
\itemize{
\item Note that this function is typically the only function recommended,
and will be called for each combination of values in \code{tab_list}.
\item If \code{fn_list} is also defined, then the corresponding function is
called first, then \code{base_fn} is called if defined.
\item \code{base_fn} is typically defined with format \code{base_fn <- function(...){}}
\item \code{base_fn} can contain argument \code{test} for example in this format
\code{base_fn <- function(..., test=FALSE){}}.
\item When argument \code{test} is defined in \code{base_fn} then for each tab,
a call is made to \code{base_fn(..., test=TRUE)} which should return
\code{logical} indicating whether to print the corresponding tab.
Only when it returns \code{TRUE} will the tab be displayed, otherwise the
tab is skipped.
}}

\item{heading_level}{\code{numeric} heading level to use, where
\code{heading_level=2} will use the markdown heading \code{"##"}, and
tabs beneath this depth will use \code{"###"} and so no.}

\item{verbose}{\code{logical} indicating whether to print verbose output.
Note that output will honor \code{htmlOut} which encodes output in
HTML format.}

\item{quiet}{\code{logical} indicating whether to silent all error messages
and verbose output. When \code{quiet=TRUE} it also sets \code{verbose=FALSE},
and silences error messages.}

\item{htmlOut}{\code{logical} passed to \code{jamba::printDebug()} when \code{verbose=TRUE}}

\item{envir}{\code{environment} used for internal iterative calls, used
to pass each layer of tab value when iterating the different values
in \code{tab_list}.}

\item{...}{additional arguments are ignored but passed to iterative
calls to this function.}
}
\value{
\code{NULL} invisibly, this function is called for the by-product
of printing RMarkdown-compatible output.
}
\description{
RMarkdown tab iterator
}
\details{
This function is intended to help automate the process of generating
tabs in RMarkdown output, particularly when there may be multiple
layers of tabs. The driving example plots a figure at the lowest level
of tabs, using the options defined by the tabs collectively.

While tabs can be created using \code{for} loops or \code{lapply()} methods,
the RMarkdown code quickly becomes complicated and difficult to maintain.

Each layer of tabs is iterated, and a preparatory function can be called,
for example to update data to be used downstream.
Any layer is free to create a figure, table, or text output, however
it is usually recommended to create output at the lowest layer.

Output can be defined in the final \code{fn_list} layer, however it is cleaner
to use the argument \code{base_fn} to generate final output such as figure
or table. The functions in \code{fn_list} should be limited to those required
for updates during the process.
\subsection{Helpful Tips}{
\itemize{
\item To store data objects generated within each call to \code{base_fn()}:
\itemize{
\item First define an output object as \code{list()} upfront.
For example, this call beforehand: \code{output_heatmap_list <- list()}
\item Then inside \code{base_fn} assign data to that object using variables
in \code{tab_list}, using \verb{<<-} parent environment assignment.
For example:
\code{output_heatmap_list[[tab_name1]][[tab_name2]] <<- hm_drawn}
\item Of course, multiple types of data can be stored by using different
\code{list} objects.
}
\item It may be helpful to catch errors, then display the error message
for debugging. (Error handling is being implemented but may still be
helpful in context of \code{base_fn} to indicate the specific step.)
\itemize{
\item For example:
}

\if{html}{\out{<div class="sourceCode R">}}\preformatted{tryCatch(
   \{
      x
   \},
   error=function(e)\{
      jamba::printDebugHtml("Error during x:");
      jamba::printDebugHtml(e);
   \})
}\if{html}{\out{</div>}}
\itemize{
\item The function \code{jamba::printDebugHtml()} will output HTML formatted
text suitable for use in RMarkdown being rendered into HTML.
An alternative is to use \code{print()} or \code{jamba::printDebug()},
however the output may not render legibly in HTML format (but in
that case the text will still be readable in the HTML source).
}
}
}

\subsection{TODO}{
\itemize{
\item Implement tab visibility within \code{fn_list} so that tabs can be
hidden at the corresponding level of particular tab values.
In this case it should also hide all child tabs.
\itemize{
\item Consider a situation with three layers of tabs, a particular
value in the second layer may be hidden, in which case all values
in the third layer will also be hidden.
}
}
}
}
\examples{
tab_labels <- list(
   assay_name=c(
      raw="raw data",
      jammanorm_raw="log ratio normalized",
      quantile_raw="quantile normalized"),
   centerby_name=c(
      global="global-centered",
      `1st_control`="centered vs first control")
   )
base_fn <- function(...){
   plot(x=c(0, 3), y=c(0, 3), asp=1, pch=".")
   text(x=c(1, 1.5, 2), y=c(1, 1.5, 2),
      c(paste0("assay_name:\n", assay_name),
      paste0("formatting:\n", formatting),
      paste0("centerby_name:\n", centerby_name)))
}
tab_list <- list(
   assay_name=c("raw", "jammanorm_raw", "quantile_raw"),
   formatting=c("tab-delimited", "RData"),
   centerby_name=c("global", "1st_control"))
rmd_tab_iterator(
   tab_list=tab_list,
   fn_list=NULL,
   base_fn=base_fn,
   tab_labels=tab_labels,
   heading_level=3,
   verbose=FALSE)

}
\seealso{
Other jam utility functions: 
\code{\link{cardinality}()},
\code{\link{color_complement}()},
\code{\link{convert_PD_df_to_SE}()},
\code{\link{convert_imputed_assays_to_na}()},
\code{\link{curate_se_colData}()},
\code{\link{curate_to_df_by_pattern}()},
\code{\link{design2layout}()},
\code{\link{get_numeric_transform}()},
\code{\link{handle_df_args}()},
\code{\link{merge_proteomics_se}()},
\code{\link{rowNormScale}()}
}
\concept{jam utility functions}
