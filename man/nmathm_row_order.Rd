% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/platjam-coverhm.R
\name{nmathm_row_order}
\alias{nmathm_row_order}
\title{Make coverage heatmaps}
\usage{
nmathm_row_order(HM, ...)
}
\arguments{
\item{HM}{\code{list} output from \code{nmatlist2heatmaps()} that
is expected to contain at least one list element
named \code{"HM_drawn"} or \code{"draw"}, with \code{"HM_drawn"}
used first if present. Either object is also expected
to contain slotName ht_list which represents the
HeatmapList. Among the heatmaps in the HeatmapList,
the first with class \code{"Heatmap"} that is not named
"cluster" will be used, since "cluster" is the name
of the heatmap used to represent k-means or other
clustering output to partition rows.}

\item{...}{additional arguments are ignored.}
}
\value{
\code{list} of rownames, where each list represents one
\code{row_slice} used in the heatmap, as defined by
\code{nmatlist2heatmaps()} arguments \code{partition} or
\code{k_clusters}.
}
\description{
(IN DEV) Make coverage heatmaps using a simple set of config options
}
\details{
This function is still in development and is not yet active.

This function is intended as a wrapper function which calls
\code{nmatlist2heatmaps()} in a more organized way.

The \code{config_df} is a \code{data.frame} with one row per coverage heatmap
to produce, and all options associated with that heatmap
are stored on the same row of the \code{data.frame}.
\itemize{
\item file: \code{character} file path to the coverage matrix file
\item name: \code{character} string used as a name, used in difference calculations
\item label: \code{character} string used as a label above each heatmap
\item display: \code{logical} indicating whether to display each heatmap
\item group: \code{character} string indicating a panel group, used to share
certain settings across groups of heatmap panels. When this value
is not defined, each heatmap is defined as its own \code{group}.
\item color: \code{character} string that refers to a specific color gradient,
or a comma-delimited series of colors to use as a color gradient.
See below for details.
\item ceiling: \code{numeric} used to define the maximum numeric value
applied to the color gradient, default=0.7
\item ylim: \code{numeric} used to define a fixed y-axis range used for the
profile plot atop each heatmap. When this value is absent or \code{NA}
the maximum y-axis value for the \code{group} is used.
\item control: \code{character} string that defines an optional control \code{name}
used to subtract coverage from this row.
}
\subsection{Colors}{

Colors can be define one of a few ways:
\itemize{
\item name of a color gradient
\item name of a single color
\item comma-delimited colors, either as color names, or as hex colors
in the format \verb{#FFAABB}.
}

Color gradients from RColorBrewer are recognized. You can view
\itemize{
\item linear color gradients: \code{RColorBrewer::display.brewer.all(type="seq")}
\item divergent color gradients: \code{RColorBrewer::display.brewer.all(type="div")}
}

Color gradients are also recognized from viridis, however these are
only linear: \code{viridis::inferno()}, \code{viridis::magma()}, \code{viridis::plasma()}
\code{viridis::cividis()},\code{viridis::viridis()}.
}
}
\examples{
# display RColorBrewer linear gradients
RColorBrewer::display.brewer.all(type="seq")

# display RColorBrewer divergent gradients
RColorBrewer::display.brewer.all(type="div")

# viridis linear gradients
jamba::showColors(list(
   inferno=viridis::inferno(11),
   magma=viridis::magma(11),
   plasma=viridis::plasma(11),
   cividis=viridis::cividis(11),
   viridis=viridis::viridis(11)))

# jam_linear
jamba::showColors(jam_linear)

# jam_divergent
jamba::showColors(jam_divergent)

Row order for nmatlist coverage heatmap

Row order for nmatlist coverage heatmap

This function is a simple wrapper function to return the
row order for the output of `nmatlist2heatmaps()`.
It traverses the `ComplexHeatmap::Heatmap` object,
including optional row slices when the rows are
partitioned. It returns the actual character
vector of rownames, optionally split into a `list`.

When the heatmap is fully drawn, for example with
`nmatlist2heatmaps(..., do_plot=TRUE)`, the output
object includes an element `"HM_drawn"` which also contains
the row order as displayed in that heatmap. Otherwise,
the output contains element `"draw"` with the heatmap
that would be drawn by `ComplexHeatmap::draw()`. In
this case the row order has not yet been defined,
however this function will evaluate the relevant
criteria to determine the row order that would be
rendered. And note that this process takes slightly
more time, but much less time than rendering the
entire set of heatmaps.

}
\seealso{
Other jam coverage heatmap functions: 
\code{\link{coverage_matrix2nmat}()},
\code{\link{get_nmat_ceiling}()},
\code{\link{nmatlist2heatmaps}()},
\code{\link{recenter_nmatlist}()},
\code{\link{restrand_nmatlist}()},
\code{\link{validate_heatmap_params}()},
\code{\link{zoom_nmat}()},
\code{\link{zoom_nmatlist}()}

Other jam coverage heatmap functions: 
\code{\link{coverage_matrix2nmat}()},
\code{\link{get_nmat_ceiling}()},
\code{\link{nmatlist2heatmaps}()},
\code{\link{recenter_nmatlist}()},
\code{\link{restrand_nmatlist}()},
\code{\link{validate_heatmap_params}()},
\code{\link{zoom_nmat}()},
\code{\link{zoom_nmatlist}()}
}
\concept{jam coverage heatmap functions}
