% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/platjam-ucsctracks.R
\name{parse_ucsc_gokey}
\alias{parse_ucsc_gokey}
\title{Parse UCSC tracks that use the Gokey format}
\usage{
parse_ucsc_gokey(
  track_lines,
  overlay_grep = c("[ -._](plus|minus|pos|neg)($|[ -._])"),
  priority = 5000,
  output_format = c("text", "list"),
  debug = c("none"),
  multiwig_concat_header = TRUE,
  group_header_delim = ": ",
  default_env = new.env(),
  verbose = FALSE,
  ...
)
}
\arguments{
\item{track_lines}{\code{character} vector containing lines read from
a track file, or valid path or connection to a track file.}

\item{overlay_grep}{\code{character} vector containing valid regular
expression patterns used to recognize when a track should
be considered an overlay coverage track. For example
\verb{track name="trackA F"} and \verb{track name="trackA R"} would
be recognized as forward and reverse strand for a track
named \code{"trackA"}. Overlay tracks are handled using the UCSC
\code{"multiWig"} approach, and not the composite track approach.
To disable overlay_grep, use \code{overlay_grep="^$"}. To enable
overlay_grep for all tracks, use \code{overlay_grep="$"}.}

\item{priority}{\code{integer} value indicating the priority to
start when assigning priority to each track.}

\item{output_format}{\code{character} string indicating the
output format, where \code{"text"} will return one long character
string, and \code{"list"} will return a \code{list} with one track
per list element with class \verb{"glue","character"}.}

\item{debug}{\code{character} indicating type of debug output:
\itemize{
\item \code{df}: returns the intermediate \code{track_df} data.frame;
\item \code{pri}: prints priority during track parsing;
\item \code{none}: does no debug, the default.
}}

\item{multiwig_concat_header}{\code{logical} indicating whether
multiWig parent tracks should be named by concatenating
\code{header1} and \code{header2} values.}

\item{group_header_delim}{\code{character} string used as delimiter
between track group and track header label, where for example
\code{"headingA1"} and \code{"headingA2"} would be combined with
delimiter \code{": "} to form \code{"headingA1: headingA2"} as the
visible label for each group of tracks.}

\item{verbose}{\code{logical} indicating whether to print verbose
output during processing.}

\item{...}{additional arguments are treated as a named list
of track parameters that override existing parameter values.
For example \code{scoreFilter=1} will override the default
for bigBed tracks \code{scoreFilter=5}.}
}
\value{
by default a character string suitable to \code{cat()}
directly into a text file, when \code{output_format="text"}.
When \code{output_format="list"} it returns a
list of \code{glue} objects, which can be concatenated into
one character string with \code{Reduce("+", trackline_list)}.
}
\description{
Parse UCSC tracks that use the Gokey format
}
\details{
Given a text file, or lines from a text file, representing
the \verb{Gokey format}, this function will parse the track
lines into groups, and return a text string usable in
a UCSC genome browser track hub.

In general, the intention is to convert a set of UCSC
track lines to a track hub format, where common track options
are converted to relevant track hub configuration lines.

Tracks are generally divided into two types of groupings:
\subsection{multiWig Overlay Tracks}{

Track name that matches \code{overlay_grep} regular expression pattern
are configured as \code{multiWig} overlay tracks. This configuration
uses the UCSC multiWig format as described here
https://genome.ucsc.edu/goldenPath/help/trackDb/trackDbHub.html#aggregate
\itemize{
\item Tracks must be named such that after \code{overlay_grep} is removed, the
resulting string defines a set of tracks. The tracks that share this
string are assigned to the same multiWig track.
\item To customize the default aggregate method, supply for example
\code{aggregate="none"} in the \code{...} arguments to this function, which
will cause multiWig tracks to use \code{"none"} when tracks are displayed.
\item Each parent track is configured as a \code{superTrack}, which contains
one or more multiWig tracks beneath it.
\item It is recommended to have one heading \code{"ChIP-seq"} with sub-heading
\code{"coverage"}, then each track is grouped by name after removing the
pattern matched by \code{overlay_grep}. This configuration will create
one pulldown entry in the track hub configuration representing the
superTrack. The superTrack will contain one multiWig track for each unique
name (after removing \code{overlap_grep}), each of which contains all
tracks that match that name.
\item Each track group is assigned priority in order of each unique track
group defined in the track config lines.
\item Individual tracks are configured as child tracks to the track groups.
}
}

\subsection{Composite View Tracks}{

All other tracks are grouped as composite tracks, specifically
using composite track view, as described here
https://genome.ucsc.edu/goldenPath/help/trackDb/trackDbHub.html#compositeTrack
\itemize{
\item More specifically, the parent track is configured as a \code{compositeTrack},
including views as \code{"view Views COV=Coverage JUNC=Junctions PEAK=Peaks"}
by default.
\item An intermediate track is created to represent each view, by default
\code{"JUNC"} however this value is not visible to users unless there are
multiple different view values.
\item Each track is configured as a child to the relevant view track.
Track priority is assigned in the order it appears in the track config
lines. The priority allows peak tracks to be ordered directly after
or before the associated coverage track.
}
}

\subsection{Top-Level Parent Tracks}{

Note that in both scenarios above, there is one top-level parent
track that contains a subset of tracks. The top-level grouping can
be defined in the track lines by supplying two header lines immediately
before each top-level grouping of tracks, referred to as \code{header1}
and \code{header2} for clarity.

The first header line \code{header1} is used as the top-level track.
For composite tracks, one composite track view is created underneath
the top-level track for each secondary header \code{header2}.
Composite tracks can associate two views to the same parent by
using only second header line \code{header2} for subsequent track groups.
In this way, composite views can effectively contain a subgroup of
tracks within each top-level header \code{header1}.

For multiWig overlay tracks, each overlay track is grouped into
the top-level header \code{header1} track. However, there is no additional
subgroup available.

An example for two composite tracks, each with one view.

\if{html}{\out{<div class="sourceCode">}}\preformatted{headingA1
headingA2
track name=trackname1
track name=trackname2

headingB1
headingB2
track name=trackname5
track name=trackname6
}\if{html}{\out{</div>}}

In this case, there will be two top-level parent tracks, labeled
\code{"headingA1"} and \code{"headingB1"}, which appear inside the track hub.
Within each track, there will be one composite view:
for \code{headingA1} there is one internal track \code{headingA2}; and
for \code{headingB1} there is one internal track \code{headingB2}.
}
}
\examples{
# example of two composite track top-level parent tracks
track_lines_text <- c("headingA1
headingA2
track name=trackname1 shortLabel=trackname1 bigDataUrl=some_url
track name=trackname2 shortLabel=trackname2 bigDataUrl=some_url
track name=trackname3 shortLabel=trackname3 bigDataUrl=some_url
track name=trackname4 shortLabel=trackname4 bigDataUrl=some_url

headingB1
headingB2
track name=trackname5 shortLabel=trackname5 bigDataUrl=some_url
track name=trackname6 shortLabel=trackname6 bigDataUrl=some_url
track name=trackname7 shortLabel=trackname7 bigDataUrl=some_url
track name=trackname8 shortLabel=trackname8 bigDataUrl=some_url
")
track_lines <- unlist(strsplit(track_lines_text, "\n"));
cat(parse_ucsc_gokey(track_lines))
track_df <- parse_ucsc_gokey(track_lines, debug="df")

# example of two multiWig track top-level parent tracks
# each of which contain two tracks with positive/negative coverage
track_lines_text2 <- c("headingA1
headingA2
track name=trackname1_pos shortLabel=trackname1_pos bigDataUrl=some_url
track name=trackname1_neg shortLabel=trackname1_neg bigDataUrl=some_url
track name=trackname2_pos shortLabel=trackname2_pos bigDataUrl=some_url
track name=trackname2_neg shortLabel=trackname2_neg bigDataUrl=some_url

headingB1
headingB2
track name=trackname3_pos shortLabel=trackname3_pos bigDataUrl=some_url
track name=trackname3_neg shortLabel=trackname3_neg bigDataUrl=some_url
track name=trackname4_pos shortLabel=trackname4_pos bigDataUrl=some_url
track name=trackname4_neg shortLabel=trackname4_neg bigDataUrl=some_url
")
track_lines2 <- unlist(strsplit(track_lines_text2, "\n"));
track_text2 <- parse_ucsc_gokey(track_lines2);
cat(track_text2);

# the final step is to save into a text file
if (FALSE) {
   cat(track_text2, file="trackDb_platjam.txt")
}

}
\seealso{
Other jam ucsc browser functions: 
\code{\link{assign_track_defaults}()},
\code{\link{get_track_defaults}()},
\code{\link{make_ucsc_trackname}()}
}
\concept{jam ucsc browser functions}
